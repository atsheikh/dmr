# Tom Marchok
# November 22, 1993
# 
# awk.convert.sis.blif.n.to.steed.format.part1
# 
# This file converts sis -n format *.n.blif to steed *.sim format.
# (sis -n format is produced by using the -n switch with the write_blif 
#  command:
# 		write_blif -n circuit.n.blif
# 
# The -n switch is used because it uses net-list format of blif when a
# node has a gate implementation in the library.
# 
# NOTE that for some of the circuits synthesized, the resulting *.n.blif
# file will contain extra (unneeded) information.  This script must be able
# to handle that information. In particular, these circuits are those for
# which:
# 	1. retime was not run while synthesizing them
# 	2. retime was run while synthesizing them, but no DFFs were added
# 	   as a result of running retime.
# 
# The extraneous information (which the script should ignore) includes:
# 	- all lines starting with ".start_kiss" and ending with ".end_kiss"
# 	- line which begins with ".latch_order"
# 	- lines which begin with ".code"
# 	- all information after the line which begins with ".exdc"
# 
# The information following the line which begins with ".exdc" is external
# don't care information.  It is explained on page 35 of the SIS manual
# (in Appendix A).  The information contained between the lines starting 
# with ".start_kiss" and ending with ".end_kiss" is an FSM description.
# This information is explained on page 39 of the SIS manual.  Apparently
# the external don't care info and fsm description are included in this
# file so that downstream tools (such as retime) can make use of this info
# for optimization purposes.
# 
# STRATEGY:
# --------
# The conversion from blif -n format to STEED format is done in 2 parts:
#		    blif -n 	--> STEED.sim 
# 	Part 1:	.model   	--> # leading comment line, name ...
# 		.inputs 	--> i ...
# 		.outputs	--> o ...
# 		
# 		Sometimes nodes are tied to ONE/ZERO.  Do not include gates
# 		which are fed by nodes which are tied to ONE/ZERO.  Syntax
# 		for this looks like:
# 			.gate zero O=[21]	--> says [21] is tied to ZERO
# 			.names [21] OUT_14	--> says [21]-buf->OUT_14
# 			1 1
# 		
# 		ELIMINATE denotes those gates (buffers) which are fed by
# 		a node which is tied to ZERO or ONE.  
#	NOTE: names of eliminated gates must be appended to top of input
#	      file in the form:	"ELIMINATE node_name"
# 		
# 	Part 2:	.mlatch   	--> p, n, I, I_sequence, mandatory comment
# 		.gate		--> gate description
# 		
# 	In both scripts, must ignore the extraneous information (which may
# 	or may not be included) as outlined above.  For Part 1, must be aware
# 	that .exdc info contains ".inputs" and ".outputs" lines.  These should
# 	be ignored.
# 	
# DESCRIPTION OF PART2
# --------------------
#  .mlatch information consists of the following fields:
#		.mlatch dff D=[3893] Q=[2095] NIL 0
#		.mlatch dff D=[3894] Q=[2098] NIL 1
# 
# According to page 36 of the SIS manual, this information is to interpreted
# as follows:
# 
# 		.mlatch <name> <format-actual-list> <control> [<init_val>]
# 
# 	name = dff  (from tom.genlib.mcnc)
# 	format-actual-list = D=[3894] Q=[2098]
# 	control = NIL   (clock not specified)
# 	init_val = 0, 1 are logic values.  2=don't care, 3 = unknown
# 		   USE THIS INFO FOR STEED/VERITAS INITIAL STATE INFO.
# 	

{
  if ($1 == ".exdc"){
    ignore_exdc_info = 1
  }
  else if (ignore_exdc_info == 1){
     # do nothing.  Ignore external dont care information, which includes
     # ".inputs" and ".outputs" lines.  (Do not confuse these with "real"
     # Primary Input and Primary Output lines.)
  }
  ##------------------------------------------
  else if ($1 == "ELIMINATE"){
    num_ELIMINATE++
    ELIMINATE[num_ELIMINATE] = $2
  }
  ##------------------------------------------
  else if ($1 == ".model"){
    # .model --> # leading comment line, name ...
    printf("# mandatory comment.\n")
    printf("name %s\n",$2)
  }
  ##------------------------------------------
  else if ($1 == ".inputs"){
     # .inputs --> i ...
     # if ($NF == "\") then input list continues on next line...
     printf("i")
     for (i=2 ; i <= NF-1; i++){
        printf(" %s",$i)
     }
     if ($NF == "\\"){
	continue_parsing_input_on_next_line = 1
     }
     else printf(" %s\n",$NF)
  }
  else if (continue_parsing_input_on_next_line == 1){
     continue_parsing_input_on_next_line = 0
     for (i=1 ; i <= NF-1; i++){
        printf(" %s",$i)
     }
     if ($NF == "\\"){
	continue_parsing_input_on_next_line = 1
     }
     else printf(" %s\n",$NF)
  }
  else if ($1 == ".outputs"){
     # .outputs --> o ...
     # if ($NF == "\") then output list continues on next line...
     printf("o")
     for (i=2 ; i <= NF-1; i++){
	## only print name of PO is it is not an ELIMINATED gate.
	found = 0
	for (j=1; j <= num_ELIMINATE; j++){
	   if (ELIMINATE[j] == $i) found = 1
	}
        if (found == 0) printf(" %s",$i)
     }
     if ($NF == "\\"){
	continue_parsing_output_on_next_line = 1
     }
     else{
	## only print name of PO is it is not an ELIMINATED gate.
	found = 0
	for (j=1; j <= num_ELIMINATE; j++){
	   if (ELIMINATE[j] == $NF) found = 1
	}
        if (found == 0) printf(" %s\n",$NF)
        else printf("\n")
     }
  }
  else if (continue_parsing_output_on_next_line == 1){
     continue_parsing_output_on_next_line = 0
     for (i=1 ; i <= NF-1; i++){
	## only print name of PO is it is not an ELIMINATED gate.
	found = 0
	for (j=1; j <= num_ELIMINATE; j++){
	   if (ELIMINATE[j] == $i) found = 1
	}
        if (found == 0) printf(" %s",$i)
     }
     if ($NF == "\\"){
	continue_parsing_output_on_next_line = 1
     }
     else{
	## only print name of PO is it is not an ELIMINATED gate.
	found = 0
	for (j=1; j <= num_ELIMINATE; j++){
	   if (ELIMINATE[j] == $NF) found = 1
	}
        if (found == 0) printf(" %s\n",$NF)
        else printf("\n")
     }
  }
}

