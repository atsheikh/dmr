# Tom Marchok
# November 22, 1993
# 
# awk.convert.sis.blif.n.to.steed.format.part2
# 
# This file converts sis -n format *.n.blif to steed *.sim format.
# (sis -n format is produced by using the -n switch with the write_blif 
#  command:
# 		write_blif -n circuit.n.blif
# 
# The -n switch is used because it uses net-list format of blif when a
# node has a gate implementation in the library.
# 
# NOTE that for some of the circuits synthesized, the resulting *.n.blif
# file will contain extra (unneeded) information.  This script must be able
# to handle that information. In particular, these circuits are those for
# which:
# 	1. retime was not run while synthesizing them
# 	2. retime was run while synthesizing them, but no DFFs were added
# 	   as a result of running retime.
# 
# The extraneous information (which the script should ignore) includes:
# 	- all lines starting with ".start_kiss" and ending with ".end_kiss"
# 	- line which begins with ".latch_order"
# 	- lines which begin with ".code"
# 	- all information after the line which begins with ".exdc"
# 
# The information following the line which begins with ".exdc" is external
# don't care information.  It is explained on page 35 of the SIS manual
# (in Appendix A).  The information contained between the lines starting 
# with ".start_kiss" and ending with ".end_kiss" is an FSM description.
# This information is explained on page 39 of the SIS manual.  Apparently
# the external don't care info and fsm description are included in this
# file so that downstream tools (such as retime) can make use of this info
# for optimization purposes.
# 
# STRATEGY:
# --------
# The conversion from blif -n format to STEED format is done in 2 parts:
#		    blif -n 	--> STEED.sim 
# 	Part 1:	.model   	--> # leading comment line, name ...
# 		.inputs 	--> i ...
# 		.outputs	--> o ...
# 		
#               Sometimes nodes are tied to ONE/ZERO.  Do not include gates
#               which are fed by nodes which are tied to ONE/ZERO.  Syntax
#               for this looks like:
#                       .gate zero O=[21]       --> says [21] is tied to ZERO
#                       .names [21] OUT_14      --> says [21]-buf->OUT_14
#                       1 1
#
#
# 	Part 2:	.mlatch   	--> p, n, I, I_sequence, mandatory blank line
# 		.gate		--> gate description
# 		
# 	In both scripts, must ignore the extraneous information (which may
# 	or may not be included) as outlined above.  For Part 1, must be aware
# 	that .exdc info contains ".inputs" and ".outputs" lines.  These should
# 	be ignored.
# 	
# DESCRIPTION OF PART2
# --------------------
#  .mlatch information consists of the following fields:
#		.mlatch dff D=[3893] Q=[2095] NIL 0
#		.mlatch dff D=[3894] Q=[2098] NIL 1
# 
# According to page 36 of the SIS manual, this information is to interpreted
# as follows:
# 
# 		.mlatch <name> <format-actual-list> <control> [<init_val>]
# 
# 	name = dff  (from tom.genlib.mcnc)
# 	format-actual-list = D=[3894] Q=[2098]
# 	control = NIL   (clock not specified)
# 	init_val = 0, 1 are logic values.  2=don't care, 3 = unknown
# 		   USE THIS INFO FOR STEED/VERITAS INITIAL STATE INFO.
# 	
# 	
#  .gate lines are straightforward to translate.
#  
#  Marchok, Mon Nov 22 21:31:57 EST 1993:  the following was occuring in
#  	all versions of set1/s820:
#  
#		 .names [4614] OUT_6	convert to
# 		 1 1			--------> gOUT_6 buf [4614] ; OUT_6
#  
#	according to page 34 of the SIS manual, this describes a buffer.
#	Note that it is not being printed out as a buffer simply because
#	there is no buffer in tom.mcnc.genlib.  However tom.mcnc.genlib
#	is not alone in this regard, as none of the other libraries in
#	/afs/ece/usr/eppling/sis/sis-1.1/sis/sis_lib/mcnc.genlib have buf
#	gates in them either.  I wonder how those libraries handle inserting
#	buffers into layouts ?
# 

{
  if ($1 == ".exdc"){
    ignore_exdc_info = 1
  }
  else if (ignore_exdc_info == 1){
     # do nothing.  Ignore external dont care information, which includes
     # ".names" lines.  (Do not confuse these with "real" .names lines.)
  }
  ##------------------------------------------
  else if (($1 == "ONE") || ($1 == "ZERO")){
    num_ONE_ZERO++
    ONE_ZERO[num_ONE_ZERO] = $2
    printf("DEBUG: ONE_ZERO[%d] = %s\n",num_ONE_ZERO,ONE_ZERO[num_ONE_ZERO])
  }
  ##------------------------------------------
  else if ($1 == ".names"){
    ## only process .names line pairs which are not in an .exdc area.
    ## exclude names of gates (buffers) which are fed by nodes which are
    ## tied to ONE/ZERO.
    ## 	Ex:  (from scf.R)
    ## 		.gate zero O=[21]
    ## 		.names [21] OUT_14
    ## 		1 1
    found = 0
    for (i=1 ; i <= num_ONE_ZERO; i++){
	if (ONE_ZERO[i] == $2) found = 1
    }
    if (found == 0){
      buf_in = $2
      buf_out = $3
      expecting_2nd_line_of_buf_description = 1
    }
  }
  else if (expecting_2nd_line_of_buf_description == 1){
    expecting_2nd_line_of_buf_description = 0
    ## print out buffer description if line reads "1 1"
    ## else print out message saying that you are confused.
    if ((NF==2) && ($1 == "1") && ($2 == "1")){
      printf("g%s buf %s ; %s\n",buf_out,buf_in,buf_out)
    }
    else{
       printf("ERROR: awk.convert.sis.blif.n.to.steed.format.part2 ")
       printf(" unexpected input near line %d of input file\n",NR)
    }
  }
  ##------------------------------------------
  else if ($1 == ".mlatch"){
    # D=n=$4, Q=p=$6, 
    # control = NIL   (clock not specified)
    # init_val=$8={0,1,2=dont care,3=unknown}
    num_latches++
    p[num_latches] = $6
    n[num_latches] = $4
    init[num_latches] = $8
  }
  ##------------------------------------------
  else if ($1 == ".gate"){
      if (first_gate_already_encountered == 0){
	first_gate_already_encountered = 1
	# print out DFF info
	printf("p")
	for (i=1; i <= num_latches; i++){
	  printf(" %s",p[i])
	}
	printf("\n")
	printf("n")
	for (i=1; i <= num_latches; i++){
	  printf(" %s",n[i])
	}
	printf("\n")
	printf("I\n")
	# see SIS manual pg 36 for meaning of init values.
	for (i=1; i <= num_latches; i++){
	  if ((init[i] == 0) || (init[i] == 2)) printf("0")
	  if (init[i] == 1) printf("1")
	  if (init[i] == 3) printf("?")   # should never occur
	}
	printf("\n\n")	# includes blank line after I_sequence.
      }
      # now process each individual gate type.
      if (($2 == "inv1x") || ($2 == "inv2x") || ($2 == "inv4x")){
	# .gate inv1x a g5 O g66
	# .gate inv2x a g5 O g66
	# .gate inv4x a g5 O g66
	# --> convert to: gg66 not g5 ; g66
	printf("g%s not %s ; %s\n",$6,$4,$6)
      }
	  # now process each individual gate type.
      else if (($2 == "buf1") ){
	# .gate inv1x a g5 O g66
	# .gate inv2x a g5 O g66
	# .gate inv4x a g5 O g66
	# --> convert to: gg66 not g5 ; g66
	printf("g%s buff %s ; %s\n",$6,$4,$6)
      }
      else if ($2 == "nand2"){
	# .gate nand2 a g1 b g2 O g100
	# --> convert to: gg100 nand g1 g2 ; g100
	printf("g%s nand %s %s ; %s\n",$8,$4,$6,$8)
      }
      else if ($2 == "nand3"){
	# .gate nand3 a g1 b g2 c g3 O g100
	# --> convert to: gg100 nand g1 g2 g3 ; g100
	printf("g%s nand %s %s %s ; %s\n",$10,$4,$6,$8,$10)
      }
      else if ($2 == "nand4"){
	# .gate nand4 a g1 b g2 c g3 d g4 O g100
	# --> convert to: gg100 nand g1 g2 g3 g4 ; g100
	printf("g%s nand %s %s %s %s ; %s\n",$12,$4,$6,$8,$10,$12)
      }
      else if ($2 == "nor2"){
	# .gate nor2 a g1 b g2 O g100
	# --> convert to: gg100 nor g1 g2 ; g100
	printf("g%s nor %s %s ; %s\n",$8,$4,$6,$8)
      }
      else if ($2 == "nor3"){
	# .gate nor3 a g1 b g2 c g3 O g100
	# --> convert to: gg100 nor g1 g2 g3 ; g100
	printf("g%s nor %s %s %s ; %s\n",$10,$4,$6,$8,$10)
      }
      else if ($2 == "nor4"){
	# .gate nor4 a g1 b g2 c g3 d g4 O g100
	# --> convert to: gg100 nor g1 g2 g3 g4 ; g100
	printf("g%s nor %s %s %s %s ; %s\n",$12,$4,$6,$8,$10,$12)
      }
      else if (($2 == "one") || ($2 == "zero")){
	### ignore.  taken care of elsewhere.
      }
	  ###############################################
	  #				AND OR GATES					#
	  ###############################################
	   else if ($2 == "and2"){
	# .gate and2 a g1 b g2 O g100
	# --> convert to: gg100 and g1 g2 ; g100
	printf("g%s and %s %s ; %s\n",$8,$4,$6,$8)
      }
      else if ($2 == "and3"){
	# .gate and3 a g1 b g2 c g3 O g100
	# --> convert to: gg100 and g1 g2 g3 ; g100
	printf("g%s and %s %s %s ; %s\n",$10,$4,$6,$8,$10)
      }
      else if ($2 == "and4"){
	# .gate and4 a g1 b g2 c g3 d g4 O g100
	# --> convert to: gg100 and g1 g2 g3 g4 ; g100
	printf("g%s and %s %s %s %s ; %s\n",$12,$4,$6,$8,$10,$12)
      }
	  else if ($2 == "and5"){
	# .gate and5 a g1 b g2 c g3 d g4 e g5 O g100
	# --> convert to: gg100 and g1 g2 g3 g4 ; g100
	printf("g%s and %s %s %s %s %s ; %s\n",$14,$4,$6,$8,$10,$12,$14)
      }
	  else if ($2 == "and6"){
	# .gate and6 a g1 b g2 c g3 d g4 e g5 f g6 O g100
	# --> convert to: gg100 and g1 g2 g3 g4 ; g100
	printf("g%s and %s %s %s %s %s %s ; %s\n",$16,$4,$6,$8,$10,$12,$14,$16)
      }
	  else if ($2 == "and7"){
	# .gate and7 a g1 b g2 c g3 d g4 e g5 f g6 g g7 O g100
	# --> convert to: gg100 and g1 g2 g3 g4 ; g100
	printf("g%s and %s %s %s %s %s %s %s ; %s\n",$18,$4,$6,$8,$10,$12,$14,$16,$18)
      }
	  else if ($2 == "and8"){
	# .gate and8 a g1 b g2 c g3 d g4 e g5 f g6 g g7 h g8 O g100
	# --> convert to: gg100 and g1 g2 g3 g4 ; g100
	printf("g%s and %s %s %s %s %s %s %s %s ; %s\n",$20,$4,$6,$8,$10,$12,$14,$16,$18,$20)
      }
	  else if ($2 == "and9"){
	# .gate and9 a g1 b g2 c g3 d g4 e g5 f g6 g g7 h g8 i g9 O g100
	# --> convert to: gg100 and g1 g2 g3 g4 ; g100
	printf("g%s and %s %s %s %s %s %s %s %s %s ; %s\n",$22,$4,$6,$8,$10,$12,$14,$16,$18,$20,$22)
      }
	  else if ($2 == "and10"){
	# .gate and10 a g1 b g2 c g3 d g4 e g5 f g6 g g7 h g8 i g9 j g10 O g100
	# --> convert to: gg100 and g1 g2 g3 g4 ; g100
	printf("g%s and %s %s %s %s %s %s %s %s %s %s ; %s\n",$24,$4,$6,$8,$10,$12,$14,$16,$18,$20,$22,$24)
      }
      else if ($2 == "or2"){
	# .gate or2 a g1 b g2 O g100
	# --> convert to: gg100 or g1 g2 ; g100
	printf("g%s or %s %s ; %s\n",$8,$4,$6,$8)
      }
      else if ($2 == "or3"){
	# .gate or3 a g1 b g2 c g3 O g100
	# --> convert to: gg100 or g1 g2 g3 ; g100
	printf("g%s or %s %s %s ; %s\n",$10,$4,$6,$8,$10)
      }
      else if ($2 == "or4"){
	# .gate or4 a g1 b g2 c g3 d g4 O g100
	# --> convert to: gg100 or g1 g2 g3 g4 ; g100
	printf("g%s or %s %s %s %s ; %s\n",$12,$4,$6,$8,$10,$12)
      }
	   else if ($2 == "or5"){
	# .gate or5 a g1 b g2 c g3 d g4 e g5 O g100
	# --> convert to: gg100 or g1 g2 g3 g4 ; g100
	printf("g%s or %s %s %s %s %s ; %s\n",$14,$4,$6,$8,$10,$12,$14)
      }
	  else if ($2 == "or6"){
	# .gate or6 a g1 b g2 c g3 d g4 e g5 f g6 O g100
	# --> convert to: gg100 or g1 g2 g3 g4 ; g100
	printf("g%s or %s %s %s %s %s %s ; %s\n",$16,$4,$6,$8,$10,$12,$14,$16)
      }
	  else if ($2 == "or7"){
	# .gate or7 a g1 b g2 c g3 d g4 e g5 f g6 g g7 O g100
	# --> convert to: gg100 or g1 g2 g3 g4 ; g100
	printf("g%s or %s %s %s %s %s %s %s ; %s\n",$18,$4,$6,$8,$10,$12,$14,$16,$18)
      }
	  else if ($2 == "or8"){
	# .gate or8 a g1 b g2 c g3 d g4 e g5 f g6 g g7 h g8 O g100
	# --> convert to: gg100 or g1 g2 g3 g4 ; g100
	printf("g%s or %s %s %s %s %s %s %s %s ; %s\n",$20,$4,$6,$8,$10,$12,$14,$16,$18,$20)
      }
	  else if ($2 == "or9"){
	# .gate or9 a g1 b g2 c g3 d g4 e g5 f g6 g g7 h g8 i g9 O g100
	# --> convert to: gg100 or g1 g2 g3 g4 ; g100
	printf("g%s or %s %s %s %s %s %s %s %s %s ; %s\n",$22,$4,$6,$8,$10,$12,$14,$16,$18,$20,$22)
      }
	  else if ($2 == "or10"){
	# .gate or10 a g1 b g2 c g3 d g4 e g5 f g6 g g7 h g8 i g9 j g10 O g100
	# --> convert to: gg100 or g1 g2 g3 g4 ; g100
	printf("g%s or %s %s %s %s %s %s %s %s %s %s ; %s\n",$24,$4,$6,$8,$10,$12,$14,$16,$18,$20,$22,$24)
      }
      else if (($2 == "one") || ($2 == "zero")){
	### ignore.  taken care of elsewhere.
      }
      else{
	printf("ERROR: following gate type not supported in both ")
	printf("tom.mcnc.genlib and HITEC on line %d\n %s\n",NR,$0)
      }
  }  ##else if ($1 == ".gate")
}

